#!/usr/bin/env python

import sys
import traceback
import socket
import threading
import time
import zmq
import signal
import logging
import os
import getopt
import copy
import datetime
from socket import gethostname
import re
import time
import atexit
from signal import SIGTERM


encoded_regexp = re.compile("%[0-9A-Fa-f]{2}")

class Commands:
  def __init__(self):
    pass

  def echo(self, params):
    return params

  commands = {
      "echo": echo,
      }

  def get_command(self, name, params):
    try:
      return Commands.commands[name.lower()](self, params)
    except KeyError, e:
      raise Exception("unknown command %s" % name)

def string_to_log_level(s):
  d = {
      "debug": logging.DEBUG,
      "info": logging.INFO,
      "warning": logging.WARNING,
      "error": logging.ERROR,
      "critical": logging.CRITICAL
      }
  return d[s]


class Server:
  def signal_handler(self, signum, frame):
    self.stop = True

  def __init__(self, config):
    self.config = config
    signal.signal(signal.SIGTERM, self.signal_handler)
    signal.signal(signal.SIGINT, self.signal_handler)
    self.stop = False
    self.logger = logging.getLogger("Server")

  def run(self):
    self.logger.info("starting service")

    self.context = zmq.Context()
    
    self.thread = threading.Thread(target=self.handle_connection)
    self.thread.start()

    while not self.stop:
      time.sleep(1)

    self.thread.join()
    self.logger.info("service stopped")


  def handle_connection(self):
    logger = logging.getLogger("ConnectionHandler")
    logger.info("started")
    commands = Commands()

    socket = self.context.socket(zmq.ROUTER)
    socket.identity = "tcp://%s:%i" % (gethostname(), self.config["port"])
    socket.bind("tcp://%(interface)s:%(port)i" % self.config)

    poller = zmq.Poller()
    poller.register(socket, zmq.POLLIN)
    while not self.stop:
      to_poll = poller.poll(1000)
      for s, n in to_poll:
        for i in range(n):
          multipart_msg = s.recv_multipart()
          if multipart_msg[1] == "PING":
            multipart_msg[1] = "PONG"
            s.send_multipart(multipart_msg)
          else:
            msg = multipart_msg[3]
            logger.debug("received <%s>" % multipart_msg)
            try: 
              resp = commands.get_command("echo", msg)
              multipart_msg[3] = resp
            except Exception, e:
              logger.error("encounter error while processing <%s>: %s" % (multipart_msg, e))
              multipart_msg[3] = "error: %s" % e
            s.send_multipart(multipart_msg)
            logger.debug("sent <%s>" % multipart_msg)
    logger.info("stopped")

class Daemon:
  def __init__(self, config, pidfile, stdin="/dev/null", stdout="/dev/null", stderr="/dev/null"):
    self.stdin = stdin
    self.stdout = stdout
    self.stderr = stderr
    self.pidfile = pidfile
    self.config = config

  def daemonize(self):
    try:
      pid = os.fork()
      if pid > 0:
        sys.exit(0)
    except OSError, e:
      sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
      sys.exit(1)

    os.chdir("/")
    os.setsid()
    os.umask(0)
    try:
      pid = os.fork()
      if pid > 0:
        sys.exit(0)
    except OSError, e:
      sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
      sys.exit(1)
    sys.stdout.flush()
    sys.stderr.flush()
    si = file(self.stdin, 'r')
    so = file(self.stdout, 'a+')
    se = file(self.stderr, 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

    atexit.register(self.delpid)
    pid = str(os.getpid())
    file(self.pidfile, 'w+').write("%s\n" % pid)

  def delpid(self):
    os.remove(self.pidfile)

  def start(self):
    try:
      pf = file(self.pidfile, 'r')
      pid = int(pf.read().strip())
      pf.close()
    except IOError:
      pid = None

    if pid:
      message = "pidfile %s already exists. Daemon already running?\n"
      sys.stderr.write(message % self.pidfile)
      sys.exit(1)

    self.daemonize()
    self.run()

  def stop(self):
    try:
      pf = file(self.pidfile, 'r')
      pid = int(pf.read().strip())
      pf.close()
    except IOError:
      pid = None

    if not pid:
      message = "pidfile %s does not exists. Daemon not running?\n"
      sys.stderr.write(message % self.pidfile)
      return

    try:
      while 1:
        os.kill(pid, SIGTERM)
        time.sleep(1)
    except OSError, err:
      err = str(err)
      if err.find("No such process") > 0:
        if os.path.exists(self.pidfile):
          os.remove(self.pidfile)

  def restart(self):
    self.stop()
    self.start()

  def run(self):
    logging.basicConfig(level=self.config["log-level"], format="%(asctime)s %(levelname)s %(name)s: %(message)s", stream=sys.stdout)
    server_logger = logging.getLogger("Daemon")
    try:
      self.server = Server(self.config)
      self.server.run()
    except pymongo.errors.AutoReconnect, e:
      server_logger.error("unable to connect to MongoDB: %s" % e)
    except AuthException, e:
      server_logger.error("%s" % e)
    except Exception, e:
      server_logger.error("exception caught: %s" % e)
      server_logger.error("traceback:")
      server_logger.error(sys.exc_info ()[0])
      server_logger.error(sys.exc_info ()[1])
      for i in traceback.extract_tb (sys.exc_info ()[2]):
        server_logger.error('  File "%s", line %i, in %s' % (i[0], i[1], i[2]))
        if i[3] is not None:
          server_logger.error('    %s' % i[3])
      
def usage(cmd):
  print """Usage:
  %s <action> <options...>
Allowed actions:
  start                                                  start daemon.
  stop                                                   stop daemon.
  restart                                                restart daemon.
Allowed options:
  -h [--help]                                            Print help message and exit.
  -I [--interface] <interface>                           Interface on which to listen for incoming connections. (default: * (all interfaces))
  -l [--log-level] <debug|info|warning|error|critical>   Logging level.
  -P [--port] <port>                                Port on which to listen for requests. (default: 13135)
  -W [--work-dir] <directory>                            Specify acmed working directory. (default: /tmp)""" % cmd

def main(argv):
  try:
    opts, args = getopt.gnu_getopt(argv[1:], "hI:l:P:W:",
        ["help", "interface=", "log-level=", "port=", "work-dir="])
  except getopt.GetoptError, e:
    sys.stderr.write("%s\n" % e)
    usage(argv[0])
    return 1

  config = {
      "cmd": argv[0],
      "interface": "*",
      "port": 13135,
      "log-level": "info",
      "work-dir": "/tmp",
      }

  for o, a in opts:
    if o in ("-h", "--help"):
      usage(argv[0])
      return 0
    elif o in ("-P", "--port"):
      config["port"] = int(a)
    elif o in ("-l", "--log-level"):
      config["log-level"] = a
    elif o in ("-W", "--work-dir"):
      config["work-dir"] = a
    elif o in ("-I", "--interface"):
      config["interface"] = a
    
  try:
    config["log-level"] = string_to_log_level(config["log-level"])
  except Exception, e:
    sys.stderr.write("Error: unknown log-level: %(log-level)s" % config)
    return 1

  if not os.path.exists(config["work-dir"]):
    os.makedirs(config["work-dir"])
  elif not os.path.isdir(config["work-dir"]):
    sys.stderr.write("Error: %(work-dir)s: is not a directory.\n" % config)
    return 1

  if len(args) > 0:
    config["action"] = args[0]
  else:
    usage(argv[0])
    return 1

  daemon = Daemon(config, os.path.join(config["work-dir"], "server.pid"),
      stdout=os.path.join(config["work-dir"], "server.out"),
      stderr=os.path.join(config["work-dir"], "server.err"))
  actions = {
      "start": daemon.start,
      "stop": daemon.stop,
      "restart": daemon.restart,
      }
  a = actions.get(config["action"], None)
  if a is None:
    print "Error: unknown action %(action)s" % config 
    return 1
  a()

if __name__ == "__main__":
  ret = main(sys.argv)
  if ret != 0:
    sys.exit(ret)
